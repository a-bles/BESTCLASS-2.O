// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3fSjjhWfcZxjRZPjXvPPXE
// Component: l9e1tCgSnZ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: 3fSjjhWfcZxjRZPjXvPPXE/projectcss
import * as sty from "./PlasmicLogin.module.css"; // plasmic-import: l9e1tCgSnZ/css

import BgLayerBlackIcon from "./icons/PlasmicIcon__BgLayerBlack"; // plasmic-import: EbHJ9Z--ov/icon
import BtnLogoIcon from "./icons/PlasmicIcon__BtnLogo"; // plasmic-import: d-MASKCBWZ/icon
import LogoKakaoIcon from "./icons/PlasmicIcon__LogoKakao"; // plasmic-import: 9IDh_upnis/icon
import GroupImageIcon from "./icons/PlasmicIcon__GroupImage"; // plasmic-import: yGyDY6vBjDO/icon
import ImageIcon from "./icons/PlasmicIcon__Image"; // plasmic-import: 3tTU237bHZP/icon
import _Icon from "./icons/PlasmicIcon___"; // plasmic-import: _47Miln1X0Z/icon

export type PlasmicLogin__VariantMembers = {};

export type PlasmicLogin__VariantsArgs = {};
type VariantPropType = keyof PlasmicLogin__VariantsArgs;
export const PlasmicLogin__VariantProps = new Array<VariantPropType>();

export type PlasmicLogin__ArgsType = {};
type ArgPropType = keyof PlasmicLogin__ArgsType;
export const PlasmicLogin__ArgProps = new Array<ArgPropType>();

export type PlasmicLogin__OverridesType = {
  root?: p.Flex<"div">;
  _?: p.Flex<"div">;
  btnLoginAuth?: p.Flex<"div">;
  btnContents?: p.Flex<"div">;
  btnLoginKakao?: p.Flex<"div">;
  btnContents2?: p.Flex<"div">;
  logoBstclsWhite?: p.Flex<"div">;
  logoBstText?: p.Flex<"div">;
  btnLogin?: p.Flex<"div">;
  btnContents3?: p.Flex<"div">;
  login?: p.Flex<"div">;
  inputPw?: p.Flex<"div">;
  category?: p.Flex<"div">;
  inputId?: p.Flex<"div">;
  text2?: p.Flex<"div">;
  category2?: p.Flex<"div">;
};

export interface DefaultLoginProps {
  dataFetches: PlasmicLogin__Fetches;
}

function PlasmicLogin__RenderFunc(props: {
  variants: PlasmicLogin__VariantsArgs;
  args: PlasmicLogin__ArgsType;
  overrides: PlasmicLogin__OverridesType;
  dataFetches?: PlasmicLogin__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"_"}
            data-plasmic-override={overrides._}
            className={classNames(projectcss.all, sty._)}
          >
            <BgLayerBlackIcon
              className={classNames(projectcss.all, sty.svg__bu8Pk)}
              role={"img"}
            />

            <div
              data-plasmic-name={"btnLoginAuth"}
              data-plasmic-override={overrides.btnLoginAuth}
              className={classNames(projectcss.all, sty.btnLoginAuth)}
            >
              <div
                data-plasmic-name={"btnContents"}
                data-plasmic-override={overrides.btnContents}
                className={classNames(projectcss.all, sty.btnContents)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ccOhx
                  )}
                >
                  {"본인 인증으로 회원 가입하기"}
                </div>

                <BtnLogoIcon
                  className={classNames(projectcss.all, sty.svg__iGgYt)}
                  role={"img"}
                />
              </div>
            </div>

            <div
              data-plasmic-name={"btnLoginKakao"}
              data-plasmic-override={overrides.btnLoginKakao}
              className={classNames(projectcss.all, sty.btnLoginKakao)}
            >
              <div
                data-plasmic-name={"btnContents2"}
                data-plasmic-override={overrides.btnContents2}
                className={classNames(projectcss.all, sty.btnContents2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fvd4D
                  )}
                >
                  {"카카오로 안전하게 함께하기"}
                </div>

                <LogoKakaoIcon
                  className={classNames(projectcss.all, sty.svg__gxw6Y)}
                  role={"img"}
                />
              </div>
            </div>

            <div
              data-plasmic-name={"logoBstclsWhite"}
              data-plasmic-override={overrides.logoBstclsWhite}
              className={classNames(projectcss.all, sty.logoBstclsWhite)}
            >
              <div
                data-plasmic-name={"logoBstText"}
                data-plasmic-override={overrides.logoBstText}
                className={classNames(projectcss.all, sty.logoBstText)}
              >
                <GroupImageIcon
                  className={classNames(projectcss.all, sty.svg__jepMf)}
                  role={"img"}
                />
              </div>

              <ImageIcon
                className={classNames(projectcss.all, sty.svg__yh4OR)}
                role={"img"}
              />
            </div>

            <div
              data-plasmic-name={"btnLogin"}
              data-plasmic-override={overrides.btnLogin}
              className={classNames(projectcss.all, sty.btnLogin)}
            >
              <div
                data-plasmic-name={"btnContents3"}
                data-plasmic-override={overrides.btnContents3}
                className={classNames(projectcss.all, sty.btnContents3)}
              >
                <div
                  data-plasmic-name={"login"}
                  data-plasmic-override={overrides.login}
                  className={classNames(projectcss.all, sty.login)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4K6Hk
                    )}
                  >
                    {"LOGIN"}
                  </div>
                </div>
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hmdi5
                )}
              >
                {"로그인 정보를 잊으셨나요?"}
              </div>
            </div>

            <div
              data-plasmic-name={"inputPw"}
              data-plasmic-override={overrides.inputPw}
              className={classNames(projectcss.all, sty.inputPw)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zLmXa
                )}
              >
                {"●●●●●●●●●●"}
              </div>

              <div
                data-plasmic-name={"category"}
                data-plasmic-override={overrides.category}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.category
                )}
              >
                {"Password"}
              </div>

              <_Icon
                className={classNames(projectcss.all, sty.svg___5W9Nh)}
                role={"img"}
              />
            </div>

            <div
              data-plasmic-name={"inputId"}
              data-plasmic-override={overrides.inputId}
              className={classNames(projectcss.all, sty.inputId)}
            >
              <div
                data-plasmic-name={"text2"}
                data-plasmic-override={overrides.text2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text2
                )}
              >
                {"supreme"}
              </div>

              <div
                data-plasmic-name={"category2"}
                data-plasmic-override={overrides.category2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.category2
                )}
              >
                {"ID"}
              </div>

              <_Icon
                className={classNames(projectcss.all, sty.svg___3TKfb)}
                role={"img"}
              />
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "_",
    "btnLoginAuth",
    "btnContents",
    "btnLoginKakao",
    "btnContents2",
    "logoBstclsWhite",
    "logoBstText",
    "btnLogin",
    "btnContents3",
    "login",
    "inputPw",
    "category",
    "inputId",
    "text2",
    "category2"
  ],
  _: [
    "_",
    "btnLoginAuth",
    "btnContents",
    "btnLoginKakao",
    "btnContents2",
    "logoBstclsWhite",
    "logoBstText",
    "btnLogin",
    "btnContents3",
    "login",
    "inputPw",
    "category",
    "inputId",
    "text2",
    "category2"
  ],
  btnLoginAuth: ["btnLoginAuth", "btnContents"],
  btnContents: ["btnContents"],
  btnLoginKakao: ["btnLoginKakao", "btnContents2"],
  btnContents2: ["btnContents2"],
  logoBstclsWhite: ["logoBstclsWhite", "logoBstText"],
  logoBstText: ["logoBstText"],
  btnLogin: ["btnLogin", "btnContents3", "login"],
  btnContents3: ["btnContents3", "login"],
  login: ["login"],
  inputPw: ["inputPw", "category"],
  category: ["category"],
  inputId: ["inputId", "text2", "category2"],
  text2: ["text2"],
  category2: ["category2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  _: "div";
  btnLoginAuth: "div";
  btnContents: "div";
  btnLoginKakao: "div";
  btnContents2: "div";
  logoBstclsWhite: "div";
  logoBstText: "div";
  btnLogin: "div";
  btnContents3: "div";
  login: "div";
  inputPw: "div";
  category: "div";
  inputId: "div";
  text2: "div";
  category2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLogin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLogin__VariantsArgs;
    args?: PlasmicLogin__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicLogin__Fetches;
  } & Omit<PlasmicLogin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLogin__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLogin__ArgProps,
      internalVariantPropNames: PlasmicLogin__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicLogin__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogin";
  } else {
    func.displayName = `PlasmicLogin.${nodeName}`;
  }
  return func;
}

export const PlasmicLogin = Object.assign(
  // Top-level PlasmicLogin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    _: makeNodeComponent("_"),
    btnLoginAuth: makeNodeComponent("btnLoginAuth"),
    btnContents: makeNodeComponent("btnContents"),
    btnLoginKakao: makeNodeComponent("btnLoginKakao"),
    btnContents2: makeNodeComponent("btnContents2"),
    logoBstclsWhite: makeNodeComponent("logoBstclsWhite"),
    logoBstText: makeNodeComponent("logoBstText"),
    btnLogin: makeNodeComponent("btnLogin"),
    btnContents3: makeNodeComponent("btnContents3"),
    login: makeNodeComponent("login"),
    inputPw: makeNodeComponent("inputPw"),
    category: makeNodeComponent("category"),
    inputId: makeNodeComponent("inputId"),
    text2: makeNodeComponent("text2"),
    category2: makeNodeComponent("category2"),

    // Metadata about props expected for PlasmicLogin
    internalVariantProps: PlasmicLogin__VariantProps,
    internalArgProps: PlasmicLogin__ArgProps
  }
);

export default PlasmicLogin;
/* prettier-ignore-end */
