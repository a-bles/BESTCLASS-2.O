// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3fSjjhWfcZxjRZPjXvPPXE
// Component: GyLQNZopSM
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: 3fSjjhWfcZxjRZPjXvPPXE/projectcss
import * as sty from "./PlasmicAuth.module.css"; // plasmic-import: GyLQNZopSM/css

import _601Icon from "./icons/PlasmicIcon___601"; // plasmic-import: afrEGrbfWN/icon

export type PlasmicAuth__VariantMembers = {};

export type PlasmicAuth__VariantsArgs = {};
type VariantPropType = keyof PlasmicAuth__VariantsArgs;
export const PlasmicAuth__VariantProps = new Array<VariantPropType>();

export type PlasmicAuth__ArgsType = {};
type ArgPropType = keyof PlasmicAuth__ArgsType;
export const PlasmicAuth__ArgProps = new Array<ArgPropType>();

export type PlasmicAuth__OverridesType = {
  root?: p.Flex<"div">;
  _?: p.Flex<"div">;
  btnWideOne?: p.Flex<"div">;
  _2?: p.Flex<"div">;
  barTopPage?: p.Flex<"div">;
  pagename?: p.Flex<"div">;
  icn?: p.Flex<"div">;
  icnexpandArrowleftLine?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultAuthProps {
  dataFetches: PlasmicAuth__Fetches;
}

function PlasmicAuth__RenderFunc(props: {
  variants: PlasmicAuth__VariantsArgs;
  args: PlasmicAuth__ArgsType;
  overrides: PlasmicAuth__OverridesType;
  dataFetches?: PlasmicAuth__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"_"}
            data-plasmic-override={overrides._}
            className={classNames(projectcss.all, sty._)}
          >
            <div
              data-plasmic-name={"btnWideOne"}
              data-plasmic-override={overrides.btnWideOne}
              className={classNames(projectcss.all, sty.btnWideOne)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eVc6H
                )}
              >
                {"PASS 를 통해 간편하게 인증하기"}
              </div>
            </div>

            <div
              data-plasmic-name={"_2"}
              data-plasmic-override={overrides._2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty._2
              )}
            >
              {"베스트클래스에서는  \n매력적인 사람들과 함께할 수 있어요. "}
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jdFyv
              )}
            >
              {"본인 확인을 위해\n인증을 진행할게요."}
            </div>

            <div
              data-plasmic-name={"barTopPage"}
              data-plasmic-override={overrides.barTopPage}
              className={classNames(projectcss.all, sty.barTopPage)}
            >
              <div
                data-plasmic-name={"pagename"}
                data-plasmic-override={overrides.pagename}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.pagename
                )}
              >
                {"본인 인증"}
              </div>

              <div
                data-plasmic-name={"icn"}
                data-plasmic-override={overrides.icn}
                className={classNames(projectcss.all, sty.icn)}
              >
                <div
                  data-plasmic-name={"icnexpandArrowleftLine"}
                  data-plasmic-override={overrides.icnexpandArrowleftLine}
                  className={classNames(
                    projectcss.all,
                    sty.icnexpandArrowleftLine
                  )}
                >
                  <_601Icon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "_",
    "btnWideOne",
    "_2",
    "barTopPage",
    "pagename",
    "icn",
    "icnexpandArrowleftLine",
    "svg"
  ],
  _: [
    "_",
    "btnWideOne",
    "_2",
    "barTopPage",
    "pagename",
    "icn",
    "icnexpandArrowleftLine",
    "svg"
  ],
  btnWideOne: ["btnWideOne"],
  _2: ["_2"],
  barTopPage: [
    "barTopPage",
    "pagename",
    "icn",
    "icnexpandArrowleftLine",
    "svg"
  ],
  pagename: ["pagename"],
  icn: ["icn", "icnexpandArrowleftLine", "svg"],
  icnexpandArrowleftLine: ["icnexpandArrowleftLine", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  _: "div";
  btnWideOne: "div";
  _2: "div";
  barTopPage: "div";
  pagename: "div";
  icn: "div";
  icnexpandArrowleftLine: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAuth__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAuth__VariantsArgs;
    args?: PlasmicAuth__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicAuth__Fetches;
  } & Omit<PlasmicAuth__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAuth__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAuth__ArgProps,
      internalVariantPropNames: PlasmicAuth__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicAuth__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAuth";
  } else {
    func.displayName = `PlasmicAuth.${nodeName}`;
  }
  return func;
}

export const PlasmicAuth = Object.assign(
  // Top-level PlasmicAuth renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    _: makeNodeComponent("_"),
    btnWideOne: makeNodeComponent("btnWideOne"),
    _2: makeNodeComponent("_2"),
    barTopPage: makeNodeComponent("barTopPage"),
    pagename: makeNodeComponent("pagename"),
    icn: makeNodeComponent("icn"),
    icnexpandArrowleftLine: makeNodeComponent("icnexpandArrowleftLine"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicAuth
    internalVariantProps: PlasmicAuth__VariantProps,
    internalArgProps: PlasmicAuth__ArgProps
  }
);

export default PlasmicAuth;
/* prettier-ignore-end */
